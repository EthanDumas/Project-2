#include "Board.h"
#include "CandyStore.h"
#include "Player.h"
#include <sstream>
#include <assert.h>
#include <iostream>

using namespace std;

int main(){
    int n = 0;
    char C; 
    Board board;
    string pname;
    string line = "character name|stamina|gold|candies";
    string name;
    string stamina;
    string gold;
    string candies;

    board.resetBoard();

    
    cout << "Welcome to Candy Land! How many people will be joining us on our adventure?" << endl;
    cin >> n;

    do{
        if(n < 0){
            cout << "You need atleast 2 people to play!" << endl;
        }
        else if(n > 4){
            cout << "Sorry but that's just to many people to take on our journey!" << endl;
        }
        else if(n == 1){
            cout << "You almost have enough players. Go find one more friend!" << endl;
        }
    }
    while(n < 0 || n > 4 || n == 1);
    vector<Player> Pplayers(n);
    vector<Board> Bplayers(n);
    Pplayers(n) = Bplayers(n);

    
    cout << "Perfect! Let's select our characters!" << endl;

 /*
use a while(getline()) to read each line (each individual character)
stringstream that variable within your while loop so you can use getline() on each line
getline() each variable you need using '|' as a delimiter
string stream the candies section seperately and push back each value onto a vector, which allows us to print them later

once we have values for all of our variables in a player class, we print out each value in the proper format inside the while loop, so that it can iterate and repeat for each individual character
*/


    for(int i = 0; i < n; i++){
        cin >> pname;
        Pplayers.at(i).setName(pname);
        cout << "What a wonderful name! Here is a list of characters that you can play as!" << endl;
        stringstream ss(line);
        getline(ss, name, '|');
        getline(ss, stamina, '|');
        getline(ss, gold, '|');

        stringstream sts(candies);
        vector<string> candies_list;
        while(getline(sts, candies , ',')){
            candies_list.push_back(candies);
        }

        cout << "Name: " << name << endl;
        cout << "Stamina: " << stamina << endl;
        cout << "Gold: " << gold << endl;
        for(int j = 0; j < 9; j++){
            int candy_position = stoi(candies_list.at(j));
            if(candy_position % 3 != 0){
                cout << "[" << candies_list.at(j) << "]    ";
            }
            else if(candy_position % 3 == 0){
                cout << "[" << candies_list.at(j) << "]    " << endl;
            }
        }  
    }

    board.displayBoard();

    cout << "Here is what the land looks like. Now it may look pretty bland, but I assure you that there are a plethora of secrets waiting to be found!" << endl;

    Candy_store c1("Sallie's Shop"), c2("Warren's Wares"), c3("Charlies Checkout");

    for(int i = 0; i < 12; i++)
    {
        int candy_nums = rand() % 12;
        board._candy(candies).at(candy_nums);
        for(int j = 0; j <= board._candy(candies).size(); j++)
        {
            if(board._candy(candies).at(candy_nums).name == board._candy(candies).at(j).name)
            {
                return i-1;
            }
        }
    }
    board._candy(candies);

    assert(c1.addCandy(board._candy(candies).at(3)));
    assert(c1.addCandy(board._candy(candies).at(8)));
    assert(c1.addCandy(board._candy(candies).at(11)));
    assert(c1.addCandy(board._candy(candies).at(0)));

    assert(c2.addCandy(board._candy(candies).at(5)));
    assert(c2.addCandy(board._candy(candies).at(1)));
    assert(c2.addCandy(board._candy(candies).at(6)));
    assert(c2.addCandy(board._candy(candies).at(10)));

    assert(c3.addCandy(board._candy(candies).at(9)));
    assert(c3.addCandy(board._candy(candies).at(7)));
    assert(c3.addCandy(board._candy(candies).at(2)));
    assert(c3.addCandy(board._candy(candies).at(4)));

    Candy_store candy_stores[] = {c1, c2, c3};

    int candy_store_one_range = (rand() % 27) % 3 == 0;
    int candy_store_two_range = (rand() % 54 + 28) % 3 == 1;
    int candy_store_three_range = (rand() % 82 +55) % 3 == 2;

    assert(board.addCandyStore(candy_store_one_range));
    assert(board.addCandyStore(candy_store_two_range));
    assert(board.addCandyStore(candy_store_three_range));

    cout << "Now we've got some hidden Candy Stores across the land. These can be used to assist you in your journey!" << endl;
    cout << "Alrighty I think it's high time that we started this adventure!" << endl;
    cout << "We'll be pulling cards in the player order that we used to select characters. So we'll be going from " << endl;
    cout << Pplayers.at(1).getName() << " to " << endl;
    cout << Pplayers.at(2).getName() << " to " << endl; 
    cout << Pplayers.at(3).getName() << " to " <<  endl;
    cout << Pplayers.at(4).getName() << endl;

    for(int i = 1; i <= 4; i++){
        int player = Pplayers.at(i);
        cout << "Here we go! It's" << Pplayers.at(i).getName() << "'s turn" << endl;
        cout << "Choose what you want to do!" << endl;
        cout << "1. Draw a card" << endl;
        cout << "2. Use candy" << endl;
        cout << "3. Show player stats" << endl;
        cin >> C;
            if(C == '1'){
                cout << "To draw a card press D" << endl;
                board.getCard(i);
                board.getCardMovement(i);
                board.movePlayer(Pplayers.at(i));
            }
    }





}

